#!/bin/bash

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -i|--input)
    INPUT="$2"
    shift
    shift
    ;;
    -m|--mode)
    MODE="$2"
    shift
    shift
    ;;
    -h|--help)
    HELP=true
    shift
    ;;
    -a|--axes)
    AXES=true
    shift
    ;;
    -s|--save)
    SAVE=true
    TO_FILE=$2
    shift
    ;;
    -p|--psave)
    P_SAVE=true
    TO_FILE=$2
    shift
    ;;
    -d|--diff)
    DIFF=true
    REF_FILE=$2
    FIRST_FILE=$3
    SEC_FILE=$4
    shift
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ "$AXES" = "true" ]; then
    AXES_STR_2D="set xlabel 'x'
    set ylabel 'y'
    set xzeroaxis
    set yzeroaxis"

    AXES_STR_3D="set xlabel 'x'
    set ylabel 'y'
    set zlabel 'z'
    set xzeroaxis
    set yzeroaxis
    set zzeroaxis"
fi

# set term which is suitable for you
PREFIXES="set term wxt;"
PREFIX_2D="${AXES_STR_2D}"
PREFIX_3D="${AXES_STR_3D}; set xyplane at 0;"
PARAMS="--persist"

if [ "$SAVE" = "true" ] || [ "$P_SAVE" = true ]; then
    if [ "$TO_FILE" ]; then
        SUFIX_SAVE="set terminal png;
                    set output '$TO_FILE.png';"

        # add replot only if we want to plot window
        if [ -z "$SAVE" ]; then
            SUFIX_SAVE="$SUFIX_SAVE replot"
        fi

        # if --save, don't use --persist
        if [ "$SAVE" = "true" ]; then
            PARAMS=""
        fi
    else
        echo "Invalid or missing argument where to save"
        exit
    fi
fi

if [ "$HELP" = "true" ]; then
    echo "mplot - custom made gnuplot based plotter for scientific data and image diffs"
    echo "Usage:"
    echo -e "\tmplot -a|--argument [value] ..."
    echo "Arguments:"
    echo -e "\t-i|--input [value] - input file containing data to be plotted"
    echo -e "\t-a|--axes - enable axis labels (XYZ)"
    echo -e "\t-d|--diff - special mode for image diffing, requires 3 files (reference, first, second), computes MSE, PSNR, SSIM and MAE"
    echo -e "\t-s|--save [file] - save output to file as PNG"
    echo -e "\t-p|--psave [file] - save output to file as PNG and leave window open"
    echo -e "\t-m|--mode [value] - plotter mode, select one of the following:"
    echo -e "\t\t\tsimple2d - standard plot"
    echo -e "\t\t\theat2d - 2D heat map, requires 3 columns"
    echo -e "\t\t\tvector2d - 2D vector plot from 3D coords, (a, b): xa,ya,za,xb,yb,zb, aka two points"
    echo -e "\t\t\tvecdist2d - 2D vector plot from 3D coords, as vector2d, with distance label, file format: x1,y1,z1,x2,y2,z2,dist"
    echo -e ""
    echo -e "\t\t\tsimple3d - standard splot"
    echo -e "\t\t\tsimpal3d - 3D colored point plot, requires x,y,z,c"
    echo -e "\t\t\tvector3d - 3D vector plot, requires (a, direction) aka point and vector direction"
    echo -e "\t\t\tvecpal3d - 3D colored vector plot, requires (a, direction, c) aka point, vector direction and single value"
    echo -e "\t\t\theat3d - 3D heat map, requires 4 columns sorted by X value with blank lines between different values"
    exit
fi

if [ "$DIFF" = "true" ]; then
    DIR_PREFIX="/usr/local/include/mplot/"

    mse1="$(python3 "$DIR_PREFIX"mse.py $REF_FILE $FIRST_FILE)"
    psnr1="$(python3 "$DIR_PREFIX"psnr.py $REF_FILE $FIRST_FILE)"
    ssim1="$(python3 "$DIR_PREFIX"ssim.py $REF_FILE $FIRST_FILE)"
    mae1="$(python3 "$DIR_PREFIX"mae.py $REF_FILE $FIRST_FILE)"
    echo -e "First image: $FIRST_FILE \n\t MSE:  $mse1 \n\t PSNR: $psnr1 \n\t SSIM: $ssim1 \n\t MAE:  $mae1"
    mse2="$(python3 "$DIR_PREFIX"mse.py $REF_FILE $SEC_FILE)"
    psnr2="$(python3 "$DIR_PREFIX"psnr.py $REF_FILE $SEC_FILE)"
    ssim2="$(python3 "$DIR_PREFIX"ssim.py $REF_FILE $SEC_FILE)"
    mae2="$(python3 "$DIR_PREFIX"mae.py $REF_FILE $SEC_FILE)"
    echo -e "Second image: $SEC_FILE \n\t MSE:  $mse2 \n\t PSNR: $psnr2 \n\t SSIM: $ssim2 \n\t MAE:  $mae2"

    echo -e "to reference image: $REF_FILE"

    exit
fi

if [ -z "$INPUT" ]; then
    echo "Invalid or missing input file, see --help"
    exit
fi

if [ -z "$MODE" ]; then
    echo "Invalid mplot mode, see --help"
    exit
fi

# 2D heat map
if [ "$MODE" = "heat2d" ]; then
    PLOT="${PREFIX_2D}
    set view map; set dgrid3d;
    set pm3d interpolate 0,0;
    splot '${INPUT}' using 1:2:3 with pm3d;"

# simple 2D point plot
elif [ "$MODE" = "simple2d" ]; then
    PLOT="${PREFIX_2D}
    plot '${INPUT}';"

# 2D vector plot, requires start and end point
elif [ "$MODE" = "vector2d" ]; then
    PLOT="${PREFIX_2D}
    plot '${INPUT}' using 1:2:(\$4-\$1):(\$5-\$2) with vectors;"

# 2D vector plot with vec length as input, requires start and end point
elif [ "$MODE" = "vecdist2d" ]; then
    PLOT="${PREFIX_2D}
    plot '${INPUT}' using 1:2:(\$4-\$1):(\$5-\$2) with vectors, '${INPUT}' u 4:5:7 with labels left;"

# simple 3D point plot
elif [ "$MODE" = "simple3d" ]; then
    PLOT="${PREFIX_3D}
    splot '${INPUT}';"

# simple 3D colored point plot
elif [ "$MODE" = "simpal3d" ]; then
    PLOT="${PREFIX_3D}
    splot '${INPUT}' using 1:2:3:4 palette;"

# 3D vector plot in format (point, direction)
elif [ "$MODE" = "vector3d" ]; then
    PLOT="${PREFIX_3D}
    splot '${INPUT}' using 1:2:3:4:5:6 with vectors;"

# 3D colored vector plot in format (point, direction, color)
elif [ "$MODE" = "vecpal3d" ]; then
    PLOT="${PREFIX_3D}
    splot '${INPUT}' using 1:2:3:4:5:6:7 with vectors palette;"

# 3D heat map, requires 4 columns sorted by X coordinate with blank lines
elif [ "$MODE" = "heat3d" ]; then
    PLOT="${PREFIX_3D}
    set samples 25, 25;
    set isosamples 50, 50;
    set pm3d interpolate 0, 0;
    splot '${INPUT}' using 1:2:3:4 with pm3d;"
else
    echo "Invalid mplot mode, see --help"
    exit
fi

SUFIXES="$SUFIX_SAVE"

if [ "$SAVE" = "true" ]; then
    PREFIXES=$SUFIXES
    SUFIXES=""
fi

gnuplot $PARAMS <<EOF
$PREFIXES
$PLOT
$SUFIXES
EOF

# just for debug
echo $PREFIXES
echo $PLOT
echo $SUFIXES
